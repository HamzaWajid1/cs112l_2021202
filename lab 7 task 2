#include<iostream>
using namespace std;

class matrix {

	int row;
	int col;
	int** array;
public:
	matrix(int r = 0, int c = 0)
	{
		row = r;
		col = c;
		 array = new int* [row];
		for (int i = 0; i < col; i++)
		{
			array[i] = new int[col];
		}
	}
	matrix operator+(const matrix a)
	{
		if (row == a.row && col == a.col)
		{
			matrix temp(row,col);
			for (int i = 0; i < row; i++)
			{
				for (int j = 0; j < row; j++)
				{
					temp.array[i][j] = this->array[i][j] + a.array[i][j];
				}
			}
			return temp;
		}
		else
		{
			cout << "error";
		}
	}

	matrix operator-(const matrix a)
	{
		if (row == a.row && col == a.col)
		{
			matrix temp;
			for (int i = 0; i < row; i++)
			{
				for (int j = 0; j < row; j++)
				{
					temp.array[i][j] = this->array[i][j] - a.array[i][j];
				}
			}
			return temp;
		}
		else
		{
			cout << "error";
		}
	}
	matrix operator*(const matrix a)
	{
		if (col = a.row)
		{
			matrix temp(row,a.col);
			for (int i = 0; i < row; i++)
			{
				for (int j = 0; j < a.col; j++)
				{
					for (int k = 0; k < col; k++)
					{
						temp.array[i][j] = array[i][k] * a.array[k][j];
					}
				}
			}
			return temp;
		}
		else
		{
			cout << "error";
		}
	}

	void setter() {
		for (int i = 0; i < row; i++)
		{
			for (int j = 0; j < col; j++)
			{
				cout << "array[" << i << "][" << j << "]";
				cin >> array[i][j];
			}
		}
	}
	void getter()
	{
		for (int i = 0; i < row; i++)
		{
			for (int j = 0; j < col; j++)
			{
				cout << "\narray[" << i << "][" << j << "]";
				cout<< array[i][j];
			}
		}
	}

};
int main()
{

	matrix m1(3,3);
	matrix m2(3,3), m3(3,3);
	m1.setter();
	m2.setter();
	//m3 = m1 + m2;
	m3 = m1 * m2;
	m3.getter();





	return 0;
}
